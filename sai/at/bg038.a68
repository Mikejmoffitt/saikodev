#include	"sai/at/bg038.h"
#include	"sai/macro.h"

	.section	.bss
	
	.global	g_sai_bg038
g_sai_bg038: ds.b Bg038State.len * SAI_BG038_COUNT

	.section	.text

	.global	sai_bg038_init
sai_bg038_init:
	calla6_safe sai_min_bg038_init
	rts

	.global	sai_min_bg038_init
sai_min_bg038_init:
#ifndef SAI_BG038_COLOR_GROUP_SPREAD
	moveq	#0, d0
	moveq	#SAI_BG038_COUNT-1, d1
	lea	g_sai_bg038, a0
0:
	move.l	d0, (a0)+  ; base_x, base_y
	move.l	d0, (a0)+  ; scroll_x, scroll_y
	move.l	#((BG038_SCRX_DEFAULT)<<16) | BG038_SCRY_DEFAULT, (a0)+  ; flagsx, flagsy
	move.w	#BG038_CTRL_DEFAULT|1, (a0)+  ; ctrl disabled, pal grp 1
	dbf	d1, 0b
#else
	;Color group spread as seen in Aku Gallet
	moveq	#BG038_CTRL_DEFAULT|1, d0
	moveq	#SAI_BG038_COUNT-1, d1
	lea	g_sai_bg038, a0
0:
	clr.l	(a0)+  ; base_x, base_y
	clr.l	(a0)+  ; scroll_x, scroll_y
	move.l	#((BG038_SCRX_DEFAULT)<<16) | BG038_SCRY_DEFAULT, (a0)+  ; flagsx, flagsy
	move.w	d0, (a0)+  ; ctrl
	addq.w	#1, d0
	dbf	d1, b0
#endif

	; Set base positions, accounting for shift from chaining
	move.l	#((BG038_BASE_X_DEFAULT)<<16) | (BG038_BASE_Y_DEFAULT), d0
	moveq	#SAI_BG038_COUNT-1, d1
	lea	g_sai_bg038, a0
0:
	move.l	d0, Bg038State.base_x(a0)
	swap	d0
	subq.w	#1, d0
	swap	d0
	lea	Bg038State.len(a0), a0
	dbf	d1, 0b

	; Wipe VRAM A
	lea	BG038_A_VRAM_BASE, a0
	moveq	#0, d0
	move.w	#(BG038_A_VRAM_SIZE/(4*4))-1, d1
0:
	.rept	4
	move.l	d0, (a0)+
	.endr
	dbf	d1, 0b
#if SAI_BG038_COUNT > 1
	; Wipe VRAM B
	lea	BG038_B_VRAM_BASE, a0
	moveq	#0, d0
	move.w	#(BG038_B_VRAM_SIZE/(4*4))-1, d1
0:
	.rept	4
	move.l	d0, (a0)+
	.endr
	dbf	d1, 0b
#endif  // SAI_BG038_COUNT
#if SAI_BG038_COUNT > 2
	; Wipe VRAM C
	lea	BG038_C_VRAM_BASE, a0
	moveq	#0, d0
	move.w	#(BG038_C_VRAM_SIZE/(4*4))-1, d1
0:
	.rept	4
	move.l	d0, (a0)+
	.endr
	dbf	d1, 0b
#endif  // SAI_BG038_COUNT
#if SAI_BG038_COUNT > 3
	; Wipe VRAM D
	lea	BG038_D_VRAM_BASE, a0
	moveq	#0, d0
	move.w	#(BG038_D_VRAM_SIZE/(4*4))-1, d1
0:
	.rept	4
	move.l	d0, (a0)+
	.endr
	dbf	d1, 0b
#endif  // SAI_BG038_COUNT

	jmp	(a6)

	.global	sai_bg038_on_vbl

.macro	bg038_update	regbase
	lea	\regbase, a1
	move.l	(a0)+, d0       ; Base X/Y
	swap	d0
	add.w	(a0)+, d0       ; scroll X
	swap	d0
	add.w	(a0)+, d0       ; scroll Y
	andi.l	#$01FF01FF, d0  ; Scroll wrap
	or.l	(a0)+, d0       ; bring in flags
	swap	d0
	move.w	d0, (a1)+       ; scrx
	swap	d0
	move.w	d0, (a1)+       ; scry
	move.w	(a0)+, (a1)+    ; ctrl
.endm

sai_bg038_on_vbl:
	lea	g_sai_bg038, a0

	bg038_update BG038_A_CTRL_BASE

#if SAI_BG038_COUNT > 1
	bg038_update BG038_B_CTRL_BASE
#endif  // SAI_BG038_COUNT
#if SAI_BG038_COUNT > 2
	bg038_update BG038_C_CTRL_BASE
#endif  // SAI_BG038_COUNT
#if SAI_BG038_COUNT > 3
	bg038_update BG038_D_CTRL_BASE
#endif  // SAI_BG038_COUNT

	rts
