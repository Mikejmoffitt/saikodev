#include	"sai/memmap.h"
#include	"sai/vdp.h"
;
; void md_dma_process_cmd(DmaCmd *cmd)
;
	.global	md_dma_process_cmd

; Parameters in DmaCmd struct
.set	PRM_STRIDE, 0   ; uint16_t
.set	PRM_LEN1,   2   ; uint16_t
.set	PRM_LEN2,   4   ; uint16_t
.set	PRM_SRC1,   6   ; uint16_t
.set	PRM_SRC2,   8   ; uint16_t
.set	PRM_SRC3,   10  ; uint16_t
.set	PRM_CTRL32, 12  ; uint32_t, cache of ctrl longword for dest addr



; a0.l = command
md_dma_process_cmd:
	lea	VDP_CTRL, a1
; A0 holds the DMA command, with precalculated register values.
	move.w	PRM_SRC3(a0), d0
	move.w	(a0)+, (a1)  ; PRM_STRIDE
	move.l	(a0)+, (a1)  ; PRM_LEN1/2
	tst.b	d0
	bmi.s	dma_fill
	move.l	(a0)+, (a1)  ; PRM_SRC1/2
	addq.w	#2, a0
	move.w	d0, (a1)  ; PRM_SRC3

#if SAI_TARGET==SAI_TARGET_MD
	move.w	#$100, SYS_Z80_BUSREQ
0:
	btst	#0, SYS_Z80_BUSREQ
	bne.s	0b
#endif  // SAI_TARGET
	move.l	(a0), (a1)   ; PRM_CTRL32
#if SAI_TARGET==SAI_TARGET_MD
	move.w	#$000, SYS_Z80_BUSREQ
#endif  // SAI_TARGET
	rts

dma_fill:
	subq	#6, a0
	move.w	d0, (a1)  ; PRM_SRC3

#if SAI_TARGET==SAI_TARGET_MD
	move.w	#$100, SYS_Z80_BUSREQ
0:
	btst	#0, SYS_Z80_BUSREQ
	bne.s	0b
#endif  // SAI_TARGET

	move.l	PRM_CTRL32(a0), (a1)  ; PRM_CTRL32
	move.w	PRM_SRC1(a0), -4(a1)  ; data
#if SAI_TARGET==SAI_TARGET_MD
	move.w	#$000, SYS_Z80_BUSREQ
#endif  // SAI_TARGET
0:
	btst	#1, 1(a1)
	bne.s	0b
	rts
