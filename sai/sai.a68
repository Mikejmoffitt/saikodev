
#include "sai/sai.h"
#include "sai/input.h"
#include "sai/irq.h"

	.section	.bss

	.global	g_sai_vbl_wait_flag

g_sai_vbl_wait_flag:              ds.b 1

	.section	.text

	.global	sai_init
	.global	sai_finish

; As the C runtime startup clears work RAM and bss, some memory related to
; hardware will need initialization once more.
sai_init:
	bsr.w	sai_irq_init
	bsr.w	sai_input_init
#if ((SAI_TARGET == SAI_TARGET_MD) || (SAI_TARGET == SAI_TARGET_C1) || SAI_TARGET == SAI_TARGET_C2)
	bsr.w	sai_vdp_init
	bsr.w	sai_vdp_dma_init
	bsr.w	sai_vdp_spr_init
	bsr.w	sai_pal_init

	// C/C2-specific additions
#if SAI_TARGET == SAI_TARGET_C1 || SAI_TARGET == SAI_TARGET_C2
	bsr.w	sai_c2_io_init
	bsr.w	sai_sysc_vctrl_init
	bsr.w	sai_pal_init
	bsr.w	sai_palcmd_init
#endif  // SAI_TARGET

	// Enable vbl int
	move.w	g_sai_vdp_reg_mode+2, d0
	ori.w	#VDP_MODESET2_IE0, d0
	move.w	d0, g_sai_vdp_reg_mode+2
	move.w	d0, VDP_BASE+VDP_OFFS_CTRL

#elif SAI_TARGET == SAI_TARGET_S16B || SAI_TARGET == SAI_TARGET_S18

#if SAI_TARGET == SAI_TARGET_S16B
	bsr.w	sai_s16b_io_init
#else
	bsr.w	sai_s18_io_init
	bsr.w	sai_vdp_init
	bsr.w	sai_vdp_dma_init
	bsr.w	sai_vdp_spr_init
#endif  // SAI_TARGET
	bsr.w	sai_pal_init
	bsr.w	sai_palcmd_init
#elif SAI_TARGET == SAI_TARGET_CPS
	bsr.w	sai_cps_ppu_init
	bsr.w	sai_pal_init
	bsr.w	sai_palcmd_init
#elif SAI_TARGET == SAI_TARGET_CPS2
	bsr.w	sai_cps_ppu_init
	bsr.w	sai_cps2_obj_init
	bsr.w	sai_pal_init
	bsr.w	sai_palcmd_init
#elif SAI_TARGET == SAI_TARGET_ESPRADE
	bsr.w	sai_ymz_reset
	bsr.w	sai_sp013_init
	bsr.w	sai_bg038_init
	bsr.w	sai_at_io_init
	; TODO: EEPROM
	bsr.w	sai_pal_init
	bsr.w	sai_palcmd_init
#endif  // SAI_TARGET
	rts

	.global	sai_irq_vbl_wait
sai_irq_vbl_wait:
	st	g_sai_vbl_wait_flag
0:
	tst.b	g_sai_vbl_wait_flag
	bne.s	0b
	rts

sai_finish:
;
; Synchronize to VBL
;
#if SAI_TARGET == SAI_TARGET_MD
	bsr.w	sai_vdp_spr_finish
	bsr.w	sai_pal_poll
	bsr.b	sai_irq_vbl_wait
	bsr.w	sai_vdp_dma_flush
	bsr.w	sai_vdp_spr_start
#elif SAI_TARGET == SAI_TARGET_C1 || SAI_TARGET == SAI_TARGET_C2
	bsr.w	sai_vdp_spr_finish
	bsr.b	sai_irq_vbl_wait
	bsr.w	sai_sysc_vctrl_on_vbl
	bsr.w	sai_palcmd_poll
	bsr.w	sai_vdp_dma_flush
	bsr.w	sai_vdp_spr_start
#elif SAI_TARGET == SAI_TARGET_S16B || SAI_TARGET == SAI_TARGET_S18
	bsr.w	sai_irq_vbl_wait
	bsr.w	sai_palcmd_poll
#elif SAI_TARGET == SAI_TARGET_CPS
	bsr.w	sai_palcmd_poll
	bsr.w	sai_cps_ppu_trigger_pal_dma
	bsr.w	sai_irq_vbl_wait
#elif SAI_TARGET == SAI_TARGET_CPS2
	; As CPS2 has its own palette DMA, run pal commands using vbl wait time.
	bsr.w	sai_palcmd_poll
	bsr.w	sai_cps_ppu_trigger_pal_dma
	bsr.w	sai_irq_vbl_wait
	bsr.w	sai_cps2_obj_on_vbl
#elif SAI_TARGET == SAI_TARGET_ESPRADE
	bsr.w	sai_sp013_finish
	bsr.w	sai_irq_vbl_wait
	bsr.w	sai_sp013_on_vbl
	bsr.w	sai_palcmd_poll
	bsr.w	sai_bg038_on_vbl
#endif  // SAI_TARGET

;
; I/O Poll
;
#if SAI_TARGET == SAI_TARGET_MD
	bsr.w	sai_md_pad_poll
#elif SAI_TARGET == SAI_TARGET_C1 || SAI_TARGET == SAI_TARGET_C2
	bsr.w	sai_c2_io_poll
#elif SAI_TARGET == SAI_TARGET_S16B
	bsr.w	sai_s16b_io_poll
#elif SAI_TARGET == SAI_TARGET_S18
	bsr.w	sai_s18_io_poll
#elif SAI_TARGET == SAI_TARGET_CPS
	bsr.w	sai_cps_io_poll
#elif SAI_TARGET == SAI_TARGET_CPS2
	bsr.w	sai_cps2_io_poll
#elif SAI_TARGET == SAI_TARGET_ESPRADE
	bsr.w	sai_at_io_poll
#endif  // SAI_TARGET

	bsr.w	sai_input_update_edges
	rts
